var documenterSearchIndex = {"docs":
[{"location":"webui/#Registrator-Web-UI-1","page":"Web UI","title":"Registrator Web UI","text":"","category":"section"},{"location":"webui/#Usage-(For-Package-Maintainers)-1","page":"Web UI","title":"Usage (For Package Maintainers)","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"This section is for people who want to use Registrator to register their packages.","category":"page"},{"location":"webui/#Before-Registering-1","page":"Web UI","title":"Before Registering","text":"","category":"section"},{"location":"webui/#Who-Can-Register-a-Package?-1","page":"Web UI","title":"Who Can Register a Package?","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"If the package is owned by an individual, then you must be that individual, or a collaborator on the repository. If the package is owned by an organization/group, then you must be a member of that organization.","category":"page"},{"location":"webui/#Validating-(Julia)Project.toml-1","page":"Web UI","title":"Validating (Julia)Project.toml","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Your package must have a JuliaProject.toml or Project.toml file at the repository root. It should contain at least three keys:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"name: The name of the package, with no trailing .jl.\nuuid: The package's UUID, which was likely generated automatically for you.\nversion: The package's version number, which cannot have been previously registered.","category":"page"},{"location":"webui/#Registering-1","page":"Web UI","title":"Registering","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Once you've prepared your repository, using Registrator is simple.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"The first thing to do is to identify yourself as someone who can register your package. At the homepage of the site, you'll be greeted by links to log in to either GitHub or GitLab. If you're registering a GitHub package, then log into GitHub, and likewise for GitLab.\nOnce authenticated, you'll see a text box to input the URL to your package repository. Do so, then press \"Submit\". The page might seem unresponsive for a while, but it'll get back to you within 10 seconds or so.\nIf everything worked out, then you should see a link to a new pull request in the registry! Sit back and let a registry maintainer complete the process for you. Otherwise, you'll see a (hopefully) informative reason for failure.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"<!– TODO: Screenshots. –>","category":"page"},{"location":"webui/#Setup-(For-Registry-Maintainers)-1","page":"Web UI","title":"Setup (For Registry Maintainers)","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"This section is for people who want to host an instance of Registrator for their own registry.","category":"page"},{"location":"webui/#Provider-Setup-1","page":"Web UI","title":"Provider Setup","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Here, the term $PROVIDER indicates the provider of your registry repository. In most cases, that will be GitHub, or perhaps GitLab.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"You will need:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"A $PROVIDER repository for the registry: This should be a given.\nA $PROVIDER user: This user must have permissions to push to the registry and create pull requests.\nA $PROVIDER API key: This should be created in the user's account.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"The OAuth providers currently supported are GitHub and GitLab. You can choose to support one or both (or none, but that wouldn't be very useful).","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"For each provider that you support, you will need:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"An OAuth2 application: For letting users authenticate. When setting the callback URL, use $SERVER_URL/callback?provider=(github|gitlab). The value for $SERVER_URL is covered below. GitLab will ask you what scopes you want at application creation time, you want read_user.\nA user and API key: This can be the same as you created above for $PROVIDER.","category":"page"},{"location":"webui/#Git-Setup-1","page":"Web UI","title":"Git Setup","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Git must be installed on the host computer. Additionally, it must be configured so that it can push to the registry, preferably as the user you just created. You should make sure that you've set up any credential handling such as SSH keys.","category":"page"},{"location":"webui/#Configuration-1","page":"Web UI","title":"Configuration","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Registrator configuration is done with a config file. Some of its values are required, and some are optional. It's important to note that optional values must be omitted or commented out when not in use.","category":"page"},{"location":"webui/#[web]-Section-1","page":"Web UI","title":"[web] Section","text":"","category":"section"},{"location":"webui/#Required-1","page":"Web UI","title":"Required","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"ip: The address that your server will listen on. For example, localhost or 0.0.0.0.\nport: The port that your server will listen to.\nserver_url: The full URL at which your server will be accessible. This could be something like http://localhost:4000 for testing, or https://example.com.\nregistry_url: Your registry repository's web URL, for example https://github.com/foo/bar.\nstop_file: Create this file to signal WebUI to shutdown.","category":"page"},{"location":"webui/#Optional-1","page":"Web UI","title":"Optional","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"registry_clone_url: Your registry's clone URL. This defaults to registry_url, but you can use this value to clone the registry via SSH, for example.\nextra_providers: Path to a Julia file that adds extra providers. This should only be used for certain cases when your provider is self-hosted (see next section).\nregistry_provider: The registry provider, which is usually inferred from the registry URL. You should only set this if provider is one you added yourself or has a URL that does not contain github or gitlab. For GitHub, the value should be github, and for GitLab, it should be gitlab. For any other provider, it should be whatever key you used in your extra providers file.\nregistry_deps: A list of URLs representing any registries that your target registry depends on.\ndisable_release_notes: Set to true to disable the release notes text box.\nroute_prefix: Base route for the server. For example, use /registrator to serve the UI on <your-hostname>/registrator/.\nlog_level: The log level. Can be \"INFO\", \"DEBUG\", \"WARN\", \"ERROR\". Default is \"INFO\".\nbackend_port: Port number of the backend registration service. Default is 5555.\nallow_private: Set this to true if you want to register private packages. Default is false.","category":"page"},{"location":"webui/#[web.git{hub,lab}]-Section-1","page":"Web UI","title":"[web.git{hub,lab}] Section","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"If you want to disable a provider, simply omit its section. For example, to support GitHub packages but not GitLab packages, only provide a [web.github] section.","category":"page"},{"location":"webui/#Required-2","page":"Web UI","title":"Required","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"token: Your user's API key.\nclient_id: Your OAuth2 application's client ID.\nclient_secret: Your OAuth2 application's client secret.","category":"page"},{"location":"webui/#Optional-2","page":"Web UI","title":"Optional","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"api_url: Provider API base URL. You should only set this variable if your provider is self-hosted (i.e. with a non-default URL).\nauth_url: OAuth2 authentication URL. Only set this for self-hosted providers.\ntoken_url: OAuth2 token exchange URL.p Only set this for self-hosted providers.\ndisable_rate_limits: Set to true to disable rate limit processing. Only set this for self-hosted instances that don't use rate limiting.","category":"page"},{"location":"webui/#Adding-Extra-Providers-1","page":"Web UI","title":"Adding Extra Providers","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"In almost all cases, you shouldn't need to do this. The only real use case is when your registry is on a self-hosted GitHub or GitLab instance, and you also want to allow registering of packages from the public instance of that provider. The only two providers supported are GitHub and GitLab. If you do want to do this, then you should set web.extra_providers as mentioned above. The file should look like this:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"PROVIDERS[\"mygithub\"] = Provider(;\n    name=\"PrivateGitHub\",\n    client=GitHubAPI(;\n        url=\"https://api.github.mysite.com\",\n        token=Token(\"my_github_token\"),\n    ),\n    client_id=\"my_oauth_app_client_id\",\n    client_secret=\"my_oauth_app_client_secret\",\n    auth_url=\"https://github.mysite.com/oauth/authorize\",\n    token_url=\"https://github.mysite.com/oauth/token\",\n    scope=\"public_repo\",\n)\n\nPROVIDERS[\"mygitlab\"] = Provider(;\n    name=\"PrivateGitLab\",\n    client=GitLabAPI(;\n        url=\"https://gitlab.mysite.com/api/v4\",\n        token=PersonalAccessToken(\"my_gitlab_token\"),\n    ),\n    client_id=\"my_oauth_app_client_id\",\n    client_secret=\"my_oauth_app_client_secret\",\n    auth_url=\"https://gitlab.mysite.com/oauth/authorize\",\n    token_url=\"https://gitlab.mysite.com/oauth/token\",\n    scope=\"read_user\",\n    include_state=false,\n    token_type=OAuth2Token,\n)","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"name: The text displayed on the authentication link.\nclient: A GitForge Forge with access to your provider.\nscope: Use public_repo for GitHub and read_user for GitLab.\ninclude_state: Leave out for GitHub and set false for GitLab.\ntoken_type: Leave out for GitHub and set OAuth2Token for GitLab.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"The OAuth2 application info and URLs are covered above. When setting your OAuth2 application's callback URL, make sure that it ends with ?provider=$PROVIDER, where $PROVIDER is mygithub for the GitHub example above.","category":"page"},{"location":"webui/#Running-the-Server-1","page":"Web UI","title":"Running the Server","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"To run the server, first add Registrator to your Julia environment. Then, make sure that your configuration file is written correctly. The following code will start the server:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"using Registrator\nRegistrator.WebUI.main()","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"A directory called registries will be created, which contains your registry. It's not important to keep it intact, as it is synchronized before registering any package.","category":"page"},{"location":"webui/#Basic-Recipe:-Public-Registry-1","page":"Web UI","title":"Basic Recipe: Public Registry","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Here's a general case of hosting a registry on GitHub and allowing package registrations from both GitHub and GitLab. The registry will be owned by RegistryOwner and the name will be MyRegistry. The web server will be hosted at https://myregistrator.com, and run on port 4000.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"The first thing we'll do is set up a config.toml file with some information we already have.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Note that in this and any following examples, the section names (i.e. [web]) will always be included for clarity. However, they should only appear once in the final file.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"[web]\nip = \"0.0.0.0\"\nport = 4000\nserver_url = \"https://myregistrator.com\"\nregistry_url = \"https://github.com/RegistryOwner/MyRegistry\"","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Next, we create the GitHub and GitLab users and API keys, and save those API keys:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"[web.github]\ntoken = \"abc...\"\n\n[web.gitlab]\ntoken = \"abc...\"","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Next, create OAuth2 applications for both of them. The callback URLs will be https://myregistrator.com/callback?provider=github and https://myregistrator.com/callback?provider=gitlab. Add the client IDs and secrets to our file:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"[web.github]\nclient_id = \"abc...\"\nclient_secret = \"abc...\"\n\n[web.gitlab]\nclient_id = \"abc...\"\nclient_secret = \"abc...\"","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Now let's configure Git and set up SSH authentication to GitHub.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Configure name and email by running these commands:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"git config --global user.name Registrator\ngit config --global user.email registrator@myregistrator.com","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Then, create an SSH key with ssh-keygen, and hit enter a few times to generate a key. Now go to GitHub user settings and add the public key to your new user.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"To actually use this key, we'll set the clone URL for our registry in .env:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"[web]\nregistry_clone_url = \"git@github.com:RegistryOwner/MyRegistry.git\"","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Our file is finished, and looks like this:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"[web]\nip = \"0.0.0.0\"\nport = 4000\nserver_url = \"https://myregistrator.com\"\nregistry_url = \"https://github.com/RegistryOwner/MyRegistry\"\nregistry_clone_url = \"git@github.com:RegistryOwner/MyRegistry.git\"\n\n[web.github]\ntoken = \"abc...\"\nclient_id = \"abc...\"\nclient_secret = \"abc...\"\n\n[web.gitlab]\ntoken = \"abc...\"\nclient_id = \"abc...\"\nclient_secret = \"abc...\"","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Now that this is done, we're ready to run the server. Since our config file is at the default location (config.toml), we don't need to pass any arguments.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"# Instalation: Just do this once.\njulia -e '\n    using Pkg;\n    Pkg.add(\"https://github.com/JuliaRegistries/Registrator.jl\")'\n\n# Run this every time.\njulia -e '\n    using Registrator;\n    Registrator.WebUI.main()'","category":"page"},{"location":"webui/#Basic-Recipe:-Private-Registry-1","page":"Web UI","title":"Basic Recipe: Private Registry","text":"","category":"section"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"This guide will be almost identical to the one above, but we'll set up a private, self-hosted registry and only allow packages from that provider.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Let's assume we're running a GitLab instance at https://git.corp.com, and our repo is at Registries/General. We want to host our instance at https://registrator.corp.com.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"First, let's again start off with a TOML file, but this time at myconfig.toml:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"[web]\nregistry_provider = \"gitlab\"\n\n[web.gitlab]\napi_url = \"https://git.corp.com/api/v4\"\nauth_url = \"https://git.corp.com/oauth/authorize\"\ntoken_url = \"https://git.corp.com/oauth/token\"\nregistry_url = \"https://git.corp.com/Registries/General\"\nserver_url = \"https://registrator.corp.com\"","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"As you can see, We had to set a few URLs manually. Additionally, we set registry_provider = \"gitlab\" because the string \"gitlab\" does not occur in our registry's URL.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Next, we create our user, API key, and OAuth application. Make sure to enable the read_user scope, and to set the callback URL to https://registrator.corp.com/callback?provider=gitlab.","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"Add our credentials to the file:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"[web.gitlab]\ntoken = \"abc...\"\nclient_id = \"abc...\"\nclient_secret = \"abc...\"","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"We'll do the same Git configuration as before, and set our clone URL appropriately:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"[web]\nregistry_clone_url = \"git@git.corp.com:Registries/General\"","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"And then we're ready. We can run it in the same way as before, but passing our non-default config path:","category":"page"},{"location":"webui/#","page":"Web UI","title":"Web UI","text":"julia -e '\n    using Registrator;\n    Registrator.WebUI.main(\"myconfig.toml\")'","category":"page"},{"location":"docker/#Registrator-docker-image-1","page":"Using Docker","title":"Registrator docker image","text":"","category":"section"},{"location":"docker/#","page":"Using Docker","title":"Using Docker","text":"Pull the latest julia image:","category":"page"},{"location":"docker/#","page":"Using Docker","title":"Using Docker","text":"docker pull julia","category":"page"},{"location":"docker/#","page":"Using Docker","title":"Using Docker","text":"Edit config.toml in run and make the necessary changes. Then run build.sh.","category":"page"},{"location":"hosting/#Registrator-Documentation-1","page":"Hosting Your Own","title":"Registrator Documentation","text":"","category":"section"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"This document describes how you can host your own instance of Registrator.","category":"page"},{"location":"hosting/#Running-the-Registrator-server-1","page":"Hosting Your Own","title":"Running the Registrator server","text":"","category":"section"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"There are three components:","category":"page"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"Comment Bot: A GitHub comment listener bot\nWebUI: A web UI\nRegistration service: A backend service to which the above components talk to.","category":"page"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"This can be run as a standalone server or as a docker container. See build.md directory for instructions on how to build the docker image.","category":"page"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"You can use make to control the components of registrator. The Makefile can be found in the run directory. Commands:","category":"page"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"make start-all\nmake start-regservice\nmake start-commentbot\nmake start-webui\nmake stop-all\nmake stop-regservice\nmake stop-commentbot\nmake stop-webui\nmake restart-all\nmake restart-regservice\nmake restart-commentbot\nmake restart-webui","category":"page"},{"location":"hosting/#Config-file-1","page":"Hosting Your Own","title":"Config file","text":"","category":"section"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"See run/sample.toml for description of entries in the config file.","category":"page"},{"location":"hosting/#GitHub-permissions-and-subscribed-events-for-the-app-1","page":"Hosting Your Own","title":"GitHub permissions and subscribed events for the app","text":"","category":"section"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"You will need read-only permission for: Repository contents, Repository Metadata","category":"page"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"You will need read permission for: Issues, Commit Statuses","category":"page"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"You will need to subscribe to the following events: Issue comment and commit comment","category":"page"},{"location":"hosting/#Private-packages-and-registries-1","page":"Hosting Your Own","title":"Private packages and registries","text":"","category":"section"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"Do not install the public Registrator on your private packages and Registries. Please host your own Registrator for this.","category":"page"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"If you do host your own Registrator, you can set it up on your private package:","category":"page"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"Set disable_private_registrations to false in the configuration.\nAdd the GitHub user that you mention in the configuration file as a collaborator to the private Registry and package.\nInstall the GitHub app on the repository.","category":"page"},{"location":"hosting/#Allow-private-organization-members-to-register-1","page":"Hosting Your Own","title":"Allow private organization members to register","text":"","category":"section"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"Set check_private_membership to true in the configuration file\nAdd the GitHub user that you mention in the configuration file as a member to the organization(s)","category":"page"},{"location":"hosting/#The-approved()-call-1","page":"Hosting Your Own","title":"The approved() call","text":"","category":"section"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"The approved() call is a comment you make on a Registry PR. This is disabled on the public Registrator as it requires write access to the repository. It does the following:","category":"page"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"If register() was called on a Pull request then that Pull request is merged.\nA tag and release with the appropriate version is created on the package repository.\nThe Pull request on the Registry is merged.\nIf register() was called on an issue, that issue is closed.","category":"page"},{"location":"hosting/#","page":"Hosting Your Own","title":"Hosting Your Own","text":"Note that you need to install the Registrator app on the Registry for approval process to work.","category":"page"},{"location":"#Registrator-1","page":"Home","title":"Registrator","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\n    \"hosting.md\",\n    \"docker.md\",\n    \"webui.md\",\n]","category":"page"}]
}
